//
// Forms stoeln from bootstrap but tweaked to fit fred 
// --------------------------------------------------
//make sure these are the same as the buttons
// $input--x-small:  28; 
// $input--small:    32;
 $input--medium:   40;
// $input--large:    44;
// $input--x-large:  48;


//input colours
$input-bg:                       #fff;
$input-bg-disabled:              $light-grey;
$input-color:                    $mid-grey;
$input-border:                   $dark-grey;
$input-border-radius:            4;
$input-border-focus:             #66afe9;
$input-color-placeholder:        $dark-grey;
$input-placeholder: $mid-grey;


//validation states
$state-success-text:             #3c763d;
$state-success-bg:               #dff0d8;
$state-success-border:           darken(adjust-hue($state-success-bg, -10), 5%);

$state-info-text:                #31708f;
$state-info-bg:                  #d9edf7;
$state-info-border:              darken(adjust-hue($state-info-bg, -10), 7%);

$state-warning-text:             #8a6d3b;
$state-warning-bg:               #fcf8e3;
$state-warning-border:           darken(adjust-hue($state-warning-bg, -10), 5%);

$state-danger-text:              #a94442;
$state-danger-bg:                #f2dede;
$state-danger-border:            darken(adjust-hue($state-danger-bg, -10), 5%);


form {
  width:auto;
}

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  min-width: 0;
}

label {
  @include rem(margin-bottom, $space-xxs);
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  font-weight: bold;
  padding-top:0;
}


// Normalize form controls
//
input[type="search"] {
  box-sizing:border-box;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  @include rem(font-size, $font-size-m);
  @include rem(padding-left, $space-xs);
  @include rem(padding-right, $space-xs);
  @include rem(border-radius,$input-border-radius);
  //@include rem(line-height, $input--medium);
  @include rem(height, $input--medium);
  @include rem(padding-top, $space-xs);
  @include rem(padding-bottom, $space-xs);
  // padding-top:0;
  // padding-bottom:0;
  display: block;
  width: 100%;
  //height: $btn--medium ; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;

  // Customize the `:focus` state to imitate native WebKit styles.
  $color-rgba: rgba(red($input-border-focus), green($input-border-focus), blue($input-border-focus), .6);
  &:focus {
    border-color: $input-border-focus;
    outline: 0;
    box-shadow:inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba;
  }

   // Placeholder
  &::-moz-placeholder           { color: $input-placeholder; }  // Firefox                               opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
  &:-ms-input-placeholder       { color: $input-placeholder; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $input-placeholder; } // Safari and Chrome

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
  @include rem(padding-top, $space-xs);
  @include rem(padding-bottom, $space-xs);
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned.
// As a workaround, we set a pixel line-height that matches the
// given height of the input. Since this fucks up everything else, we have to
// appropriately reset it for Internet Explorer and the size variations.

//todo
// input[type="date"],
// input[type="time"],
// input[type="datetime-local"],
// input[type="month"] {
//   $line-height-base:3;
//   line-height: $input-height-base;
//   // IE8+ misaligns the text within date inputs, so we reset
//   line-height: $line-height-base #{\0};
// }

// Form groups
.form-group {
  @include rem(margin-bottom, $space-m);
}
// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  //min-height: $line-height-computed; // clear the floating input if there is no label text
  label {
    @include rem(padding-left, 20);
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}


// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: not-allowed;
    }
  }
}


//form styling with icons 

.has-icon {
  position: relative;
}


.form-control-icon {
  @include rem(line-height, $input--medium);
  @include rem(height, $input--medium);
  @include rem(width, $input--medium);
  position: absolute;
  top: 28px; // Height of the `label` and its margin
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  text-align: center;
 }


// Feedback states
.has-success {
  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
}


// Reposition feedback icon if label is hidden with "screenreader only" state
.has-icon label.sr-only ~ .form-control-icon {
  top: 0;
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 0;
  color: lighten($base-font-color, 25%); // lighten the text some for contrast
}



// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {
  // Kick in the inline
  @include medium {
    // Inline-block all the things for "inline"
    * {
      vertical-align: middle;
    }
    //wrapper
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }
    //label elements
    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }
  }
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    @include rem(padding-top, 7); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    //min-height: ($line-height-computed + ($padding-base-vertical + 1));
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @include medium {
    .control-label {
      @include rem(padding-right,$space-m);
      text-align: right;
      vertical-align: middle;
    }
  }
}
//todo fix

.stacked--inputs {
  .form-control {
    border-top:none;  
    border-radius:0;
  } 
  
  .form-control:first-of-type {
    @include rem(border-top-left-radius,$input-border-radius);
    @include rem(border-top-right-radius,$input-border-radius);
    border-top: 1px solid $input-border;
  }
  .form-control:last-child {
    @include rem(border-bottom-left-radius,$input-border-radius);
    @include rem(border-bottom-right-radius,$input-border-radius);
    border-bottom: 1px solid $input-border;
  }
}
